#Использовать json
#Использовать logos
#Использовать strings

Перем Лог;
Перем КлиентВеб;
Перем мСоединение;

Перем мИмяОпубликованнойБазы;
Перем ПрефиксИмени;
Перем ИмяОбъектаКонфигурации;
Перем СуффиксИмени;

Перем ТекущееВыражениеФильтра;

Процедура ИспользоватьСоединениеИнформационнойБазы(Знач Соединение, Знач ИмяОпубликованнойБазы) Экспорт
	мСоединение = Соединение;
	мИмяОпубликованнойБазы = ИмяОпубликованнойБазы;
	КлиентВеб.ИспользоватьСоединение(Соединение);
КонецПроцедуры

Функция ПолучитьПубликациюОбъектаOData() Экспорт
	Если ЗначениеЗаполнено(ПрефиксИмени) И ЗначениеЗаполнено(ИмяОбъектаКонфигурации) Тогда
		АдресПубликации = СтрШаблон("%1/odata/standard.odata/%2_%3%4", мИмяОпубликованнойБазы,ПрефиксИмени,ИмяОбъектаКонфигурации,СуффиксИмени);
		Возврат АдресПубликации;
	Иначе
		ВызватьИсключение "Не указан объект метаданных
		|Текущий объект-ресурс: " + ПрефиксИмени + "_" + ИмяОбъектаКонфигурации + СуффиксИмени;
	КонецЕсли;
КонецФункции

//функции выборки
Функция ПолучитьВсе() Экспорт
	АдресРесурса = ПолучитьПубликациюОбъектаOData() + "()?$format=json";
	Лог.Отладка("Запрашиваю ресурс: " + АдресРесурса);
	Возврат КлиентВеб.Получить(АдресРесурса)["value"];
КонецФункции

Функция ПолучитьПоКлючевымПолям(ВыражениеКлючевыхПолей, ВыражениеФильтра = "") Экспорт
	АдресРесурса = ПолучитьПубликациюОбъектаOData() 
		+ СтрШаблон("(%1)?$format=json%2",ВыражениеКлючевыхПолей, ВыражениеФильтра);
	Лог.Отладка("Запрашиваю ресурс: " + АдресРесурса);
	Возврат КлиентВеб.Получить(АдресРесурса);
КонецФункции

Функция ПолучитьСсылку(СсылкаGUID) Экспорт
	_ТекущееВыражениеФильтра = "&$top=1";
	Возврат ПолучитьПоКлючевымПолям("guid('" + СсылкаGUID + "')", _ТекущееВыражениеФильтра);
КонецФункции

//Функции отбора
Функция ОтборПоРеквизиту(_ИмяРеквизита, _ЗначениеРекзвита) Экспорт
	ТекущееВыражениеФильтра = "";
	ВыражениеПоиска = СтрШаблон("&$filter=%1 eq '%2'", _ИмяРеквизита, _ЗначениеРекзвита);
	РезультаОтбора =  ПолучитьПоКлючевымПолям("", ВыражениеПоиска);
	Возврат РезультаОтбора["value"]; //Пустой массив или полный - тогда доступно сравнение на количество
КонецФункции

//Создание объектов
Функция СоздатьЭлементСправочника(Знач Наименование, Знач Реквизиты) Экспорт
	Если ПрефиксИмени <> "Catalog" Тогда
		ВызватьИсключение "Текущий менеджер объекта не является справочником.Текущий префикс объекта - " + ПрефиксИмени; 
	КонецЕсли;

	КлиентВеб.ОчиститьВсеПараметры();
	КлиентВеб.ДобавитьПараметр("Ref_Key","00000000-0000-0000-0000-000000000000"); // Пустая ссылка
	КлиентВеб.ДобавитьПараметр("Description", Наименование);

	Для каждого Реквизит Из Реквизиты Цикл
		КлиентВеб.ДобавитьПараметр(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;

	ЗаголовокHTTP = Новый Соответствие(); ЗаголовокHTTP.Вставить("Accept", "application/json");
	КлиентВеб.УстановитьЗаголовки(ЗаголовокHTTP);

	КлиентВеб.УстановитьТипКонтентаТелаЗапроса(ТипКонтентаТелаЗапроса.JSON);
	
	АдресРесурса = ПолучитьПубликациюОбъектаOData();
	РезультатСоздания =  КлиентВеб.Отправить(АдресРесурса);

	КлиентВеб.ОчиститьЗаголовки();

	Возврат РезультатСоздания["value"];

КонецФункции

// Функции инициализации адреса объекта
Функция Справочник(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "Catalog"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция Документ(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "Document"; СуффиксИмени = "";	Возврат ЭтотОбъект; КонецФункции
Функция ЖурналДокументов(_Имя) Экспорт	ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "DocumentJournal"; СуффиксИмени = ""; Возврат ЭтотОбъект;КонецФункции
Функция Константа(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "Constant"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция ПланыОбмена(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "ExchangePlan"; СуффиксИмени = "";	Возврат ЭтотОбъект; КонецФункции
Функция ПланыСчетов(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "ChartOfAccounts"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция ПланВидовРасчета(_Имя) Экспорт	ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "ChartOfCalculationTypes"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция ПланВидовХарактеристик(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "ChartOfCharacteristicTypes"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции 
Функция РегистрСведений(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "InformationRegister"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции 
Функция РегистрРасчета(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "CalculationRegister"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция РегистрБухгалтерии(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "AccountingRegister"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция РегистрНакопления(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "AccumulationRegister"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция БизнесПроцесс(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "BusinessProcess"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции
Функция Задача(_Имя) Экспорт ИмяОбъектаКонфигурации = _Имя;	ПрефиксИмени = "Task"; СуффиксИмени = ""; Возврат ЭтотОбъект; КонецФункции

//Суффиксы
Функция ТабличнаяЧасть(_Имя) Экспорт СуффиксИмени = "_" + _Имя; Возврат ЭтотОбъект; КонецФункции
Функция ВиртуальнаяТаблица(_Имя) Экспорт СуффиксИмени = "_" + _Имя; Возврат ЭтотОбъект; КонецФункции
Функция ТипСтрокиТабличнойЧасти(_Имя) Экспорт ВызватьИсключение "Формально RowType - но даная функциональность не реализована"; КонецФункции
Функция ЗаписьРегистра(_Имя) Экспорт СуффиксИмени = "_RecordType"; КонецФункции

КлиентВеб = Новый КлиентВебAPI();
Лог = Логирование.ПолучитьЛог("oscript.lib.restler.odata");
